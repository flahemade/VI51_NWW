/* 
 * $Id$
 * 
 * Copyright (c) 2014-15 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.vi51.framework.^agent

import fr.utbm.info.vi51.framework.environment.DynamicType
import fr.utbm.info.vi51.framework.environment.Percept
import fr.utbm.info.vi51.framework.environment.StopSimulation
import fr.utbm.info.vi51.framework.math.Vector2f
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import java.util.List
import java.util.UUID
import fr.utbm.info.vi51.framework.environment.Influence

agent AbstractAnimat {
	
	uses PhysicEnvironment, Lifecycle
	
	var behaviorType : DynamicType
	
	on Initialize {
		var physicSkill = new StandardPhysicEnvironment(
			occurrence.parameters.get(0) as UUID,
			occurrence.parameters.get(1) as UUID)
		this.behaviorType = occurrence.parameters.get(2) as DynamicType
		setSkill(PhysicEnvironment, physicSkill)
	}
	
	def getMaxLinear(p : Percept) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxLinearAcceleration else p.maxLinearSpeed
	}
	
	def getMaxAngular(p : Percept) : float {
		if (this.behaviorType == DynamicType::STEERING) p.maxAngularAcceleration else p.maxAngularSpeed
	}

	def emitInfluence(output : BehaviourOutput , influences : Influence*) {
		if (output !== null) {
			if (output.getType() === DynamicType::STEERING)
				influenceSteering(output.linear, output.angular, influences)
			else
				influenceKinematic(output.linear, output.angular, influences);
		} else {
			influenceSteering(new Vector2f, 0f, influences)
		}
	}
	
	def doNothing {
		influenceKinematic(new Vector2f, 0f)
	}

	def first(list : List<Percept>) : Percept {
		if (list.isEmpty) null else list.get(0)
	}

	on StopSimulation {
		killMe
	}

}